{"version":3,"sources":["generated/graphql.ts","components/actor-search/index.tsx","components/crossover-movies/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CacheControlScope","defaultOptions","ActorSearchDocument","gql","CrossoverMoviesDocument","ActorSearch","props","useState","searchInput","setSearchInput","baseOptions","options","Apollo","useActorSearchQuery","variables","queryString","skip","length","loading","error","data","className","type","value","onChange","event","target","actorSearch","actorSearchResult","results","find","id","Number","onActorSelect","map","name","CrossoverMovies","formatMovie","movie","credits","crossoverCredits","credit","actorId","characterName","title","movies","client","ApolloClient","uri","process","cache","InMemoryCache","App","selectedActors","setSelectedActors","useCrossoverMoviesLazyQuery","getCrossoverMovies","disabled","onClick","actorIds","crossoverMovies","href","rel","alt","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAuCYA,E,yFAjCNC,EAAkB,I,SAiCZD,K,gBAAAA,E,mBAAAA,M,KA4EL,IAAME,EAAsBC,cAAH,kPA0CzB,IAAMC,EAA0BD,cAAH,yN,iBCnJ7B,SAASE,EAAYC,GAC1B,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEA,EDqIK,SAA6BC,GAC5B,IAAMC,EAAO,2BAAOV,GAAmBS,GACvC,OAAOE,WAA6DV,EAAqBS,GCvI9DE,CAAoB,CACnDC,UAAW,CAAEC,YAAaP,GAC1BQ,KAAMR,EAAYS,QAAU,IAFtBC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAexB,OACE,sBAAKC,UAAU,eAAf,UACE,uBACEC,KAAK,OACLC,MAAOf,EACPgB,SAAU,SAACC,GAAD,OAAWhB,EAAegB,EAAMC,OAAOH,UAGlDL,GAAY,2CAEZC,GAAU,wCAAWA,MAEjB,OAAJC,QAAI,IAAJA,OAAA,EAAAA,EAAMO,cACL,wBAAQH,SAvBd,SAAyBC,GACvB,IAAMG,EAAiB,OAAGR,QAAH,IAAGA,OAAH,EAAGA,EAAMO,YAAYE,QAAQC,MAAK,SAAAF,GACvD,OAAOA,EAAkBG,KAAOC,OAAOP,EAAMC,OAAOH,UAGlDK,GACFtB,EAAM2B,cAAcL,IAiBlB,SACGR,EAAKO,YAAYE,QAAQK,KAAI,SAACN,GAAD,OAC5B,wBAEEL,MAAOK,EAAkBG,GAF3B,SAIGH,EAAkBO,MAHdP,EAAkBG,YChC9B,SAASK,EAAgB9B,GAC9B,SAAS+B,EAAYC,GACnB,IAAMC,EAAUD,EAAME,iBAAiBN,KAAI,SAAAO,GACzC,MAAM,aAAN,OAAoBA,EAAOC,QAA3B,6BAAuDD,EAAOE,kBAGhE,MAAM,UAAN,OAAiBL,EAAMM,MAAvB,sBAA0CL,GAG5C,OACE,6BACGjC,EAAMuC,OAAOX,KAAI,SAAAI,GAAK,OACrB,6BACGD,EAAYC,IADNA,EAAMP,S,UCdjBe,EAAS,IAAIC,eAAa,CAC9BC,IAAKC,qDACLC,MAAO,IAAIC,kBA0EEC,MAvEf,WACE,MAA4C7C,mBAA8B,IAA1E,mBAAO8C,EAAP,KAAuBC,EAAvB,KAEA,EH4KK,SAAqC5C,GAClC,IAAMC,EAAO,2BAAOV,GAAmBS,GACvC,OAAOE,eAAyER,EAAyBO,GG9K1D4C,CAA4B,CACjFT,OAAQA,IADV,mBAAOU,EAAP,YAA6BtC,EAA7B,EAA6BA,QAASC,EAAtC,EAAsCA,MAAOC,EAA7C,EAA6CA,KAe7C,OACE,cAAC,iBAAD,CAAgB0B,OAAQA,EAAxB,SACE,sBAAKzB,UAAU,MAAf,UACE,kDAEA,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,SAAf,UACE,2DAEA,cAAC,EAAD,CACEY,cArBZ,SAAuBL,GACrB0B,EAAkB,GAAD,mBACZD,GADY,CAEfzB,QAqBM,6BACGyB,EAAenB,KAAI,SAAAN,GAAiB,OACnC,+BACGA,EAAkBO,KADrB,SACiCP,EAAkBG,GADnD,MAASH,EAAkBG,YAOjC,sBAAKV,UAAU,UAAf,UACE,wBACEoC,SAAUJ,EAAepC,QAAU,EACnCyC,QAAS,kBAAMF,EAAmB,CAAE1C,UAAW,CAAE6C,SA5BpDN,EAAenB,KAAI,qBAAGH,UA0BrB,yBAOCb,GAAY,2CAEZC,GAAU,wCAAWA,MAEjB,OAAJC,QAAI,IAAJA,OAAA,EAAAA,EAAMwC,kBACL,cAACxB,EAAD,CACES,OAAQzB,EAAKwC,wBAMrB,sBAAKvC,UAAU,gBAAf,UACE,mEACA,mBAAGwC,KAAK,6BAA6BnC,OAAO,SAASoC,IAAI,aAAzD,SACE,qBAAKC,IAAI,0BAA0BC,IAAI,kJChEpCC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7e204649.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\n\nexport type ActorSearchResponse = {\n  __typename?: 'ActorSearchResponse';\n  results: Array<ActorSearchResult>;\n  meta: ActorSearchResponseMeta;\n};\n\nexport type ActorSearchResponseMeta = {\n  __typename?: 'ActorSearchResponseMeta';\n  page: Scalars['Int'];\n  totalResults: Scalars['Int'];\n  totalPages: Scalars['Int'];\n};\n\nexport type ActorSearchResult = {\n  __typename?: 'ActorSearchResult';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  profilePath?: Maybe<Scalars['String']>;\n};\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\nexport type CrossoverMovie = {\n  __typename?: 'CrossoverMovie';\n  id: Scalars['Int'];\n  title: Scalars['String'];\n  profilePath?: Maybe<Scalars['String']>;\n  crossoverCredits: Array<MovieCastCredit>;\n};\n\nexport type MovieCastCredit = {\n  __typename?: 'MovieCastCredit';\n  actorId: Scalars['Int'];\n  movieId: Scalars['Int'];\n  characterName: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  _?: Maybe<Scalars['Boolean']>;\n  actorSearch: ActorSearchResponse;\n  crossoverMovies: Array<CrossoverMovie>;\n};\n\n\nexport type QueryActorSearchArgs = {\n  queryString: Scalars['String'];\n  page: Scalars['Int'];\n};\n\n\nexport type QueryCrossoverMoviesArgs = {\n  actorIds: Array<Scalars['Int']>;\n};\n\n\nexport type ActorSearchQueryVariables = Exact<{\n  queryString: Scalars['String'];\n}>;\n\n\nexport type ActorSearchQuery = (\n  { __typename?: 'Query' }\n  & { actorSearch: (\n    { __typename?: 'ActorSearchResponse' }\n    & { results: Array<(\n      { __typename?: 'ActorSearchResult' }\n      & Pick<ActorSearchResult, 'id' | 'name'>\n    )>, meta: (\n      { __typename?: 'ActorSearchResponseMeta' }\n      & Pick<ActorSearchResponseMeta, 'totalResults' | 'totalPages'>\n    ) }\n  ) }\n);\n\nexport type CrossoverMoviesQueryVariables = Exact<{\n  actorIds: Array<Scalars['Int']> | Scalars['Int'];\n}>;\n\n\nexport type CrossoverMoviesQuery = (\n  { __typename?: 'Query' }\n  & { crossoverMovies: Array<(\n    { __typename?: 'CrossoverMovie' }\n    & Pick<CrossoverMovie, 'id' | 'title'>\n    & { crossoverCredits: Array<(\n      { __typename?: 'MovieCastCredit' }\n      & Pick<MovieCastCredit, 'actorId' | 'characterName'>\n    )> }\n  )> }\n);\n\n\nexport const ActorSearchDocument = gql`\n    query ActorSearch($queryString: String!) {\n  actorSearch(queryString: $queryString, page: 1) {\n    results {\n      id\n      name\n    }\n    meta {\n      totalResults\n      totalPages\n    }\n  }\n}\n    `;\n\n/**\n * __useActorSearchQuery__\n *\n * To run a query within a React component, call `useActorSearchQuery` and pass it any options that fit your needs.\n * When your component renders, `useActorSearchQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useActorSearchQuery({\n *   variables: {\n *      queryString: // value for 'queryString'\n *   },\n * });\n */\nexport function useActorSearchQuery(baseOptions: Apollo.QueryHookOptions<ActorSearchQuery, ActorSearchQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ActorSearchQuery, ActorSearchQueryVariables>(ActorSearchDocument, options);\n      }\nexport function useActorSearchLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ActorSearchQuery, ActorSearchQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ActorSearchQuery, ActorSearchQueryVariables>(ActorSearchDocument, options);\n        }\nexport type ActorSearchQueryHookResult = ReturnType<typeof useActorSearchQuery>;\nexport type ActorSearchLazyQueryHookResult = ReturnType<typeof useActorSearchLazyQuery>;\nexport type ActorSearchQueryResult = Apollo.QueryResult<ActorSearchQuery, ActorSearchQueryVariables>;\nexport const CrossoverMoviesDocument = gql`\n    query CrossoverMovies($actorIds: [Int!]!) {\n  crossoverMovies(actorIds: $actorIds) {\n    id\n    title\n    crossoverCredits {\n      actorId\n      characterName\n    }\n  }\n}\n    `;\n\n/**\n * __useCrossoverMoviesQuery__\n *\n * To run a query within a React component, call `useCrossoverMoviesQuery` and pass it any options that fit your needs.\n * When your component renders, `useCrossoverMoviesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCrossoverMoviesQuery({\n *   variables: {\n *      actorIds: // value for 'actorIds'\n *   },\n * });\n */\nexport function useCrossoverMoviesQuery(baseOptions: Apollo.QueryHookOptions<CrossoverMoviesQuery, CrossoverMoviesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<CrossoverMoviesQuery, CrossoverMoviesQueryVariables>(CrossoverMoviesDocument, options);\n      }\nexport function useCrossoverMoviesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CrossoverMoviesQuery, CrossoverMoviesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<CrossoverMoviesQuery, CrossoverMoviesQueryVariables>(CrossoverMoviesDocument, options);\n        }\nexport type CrossoverMoviesQueryHookResult = ReturnType<typeof useCrossoverMoviesQuery>;\nexport type CrossoverMoviesLazyQueryHookResult = ReturnType<typeof useCrossoverMoviesLazyQuery>;\nexport type CrossoverMoviesQueryResult = Apollo.QueryResult<CrossoverMoviesQuery, CrossoverMoviesQueryVariables>;","import React, { useState } from 'react';\n\nimport { ActorSearchResult, useActorSearchQuery } from '../../generated/graphql';\n\nimport './ActorSearch.css';\n\ninterface IProps {\n  onActorSelect: (result: ActorSearchResult) => void\n}\n\nexport function ActorSearch(props: IProps) {\n  const [searchInput, setSearchInput] = useState('');\n\n  const { loading, error, data } = useActorSearchQuery({\n    variables: { queryString: searchInput },\n    skip: searchInput.length <= 2\n  });\n\n  function onActorSelected(event: React.ChangeEvent<HTMLSelectElement>) {\n    const actorSearchResult = data?.actorSearch.results.find(actorSearchResult => {\n      return actorSearchResult.id === Number(event.target.value);\n    })!;\n\n    if (actorSearchResult) {\n      props.onActorSelect(actorSearchResult);\n    }\n  }\n\n  return (\n    <div className=\"actor-search\">\n      <input\n        type=\"text\"\n        value={searchInput}\n        onChange={(event) => setSearchInput(event.target.value)}\n      />\n\n      {loading && (<p>loading...</p>)}\n\n      {error && (<p>error: {error}</p>)}\n\n      {data?.actorSearch && (\n        <select onChange={onActorSelected}>\n          {data.actorSearch.results.map((actorSearchResult) => (\n            <option\n              key={actorSearchResult.id}\n              value={actorSearchResult.id}\n            >\n              {actorSearchResult.name}\n            </option>\n          ))}\n        </select>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { CrossoverMovie, MovieCastCredit } from '../../generated/graphql';\n\ntype MovieWithCredits = Omit<CrossoverMovie, 'crossoverCredits'> & {\n  crossoverCredits: Array<Pick<MovieCastCredit, 'actorId' | 'characterName'>>\n};\n\ninterface IProps {\n  movies: MovieWithCredits[]\n}\n\nexport function CrossoverMovies(props: IProps) {\n  function formatMovie(movie: MovieWithCredits) {\n    const credits = movie.crossoverCredits.map(credit => {\n      return `Actor ID: ${credit.actorId}, Character Name: ${credit.characterName}`;\n    });\n\n    return `Title: ${movie.title}, credits: ${credits}`;\n  }\n\n  return (\n    <ul>\n      {props.movies.map(movie => (\n        <li key={movie.id}>\n          {formatMovie(movie)}\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\nimport React, { useState } from 'react';\n\nimport { ActorSearch } from './components/actor-search';\nimport { CrossoverMovies } from './components/crossover-movies';\nimport { ActorSearchResult, useCrossoverMoviesLazyQuery } from './generated/graphql';\n\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_GQL_API_URL,\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  const [selectedActors, setSelectedActors] = useState<ActorSearchResult[]>([]);\n\n  const [getCrossoverMovies, { loading, error, data }] = useCrossoverMoviesLazyQuery({\n    client: client\n  });\n\n  function onActorSelect(actorSearchResult: ActorSearchResult) {\n    setSelectedActors([\n      ...selectedActors,\n      actorSearchResult\n    ]);\n  }\n\n  function selectedActorIds() {\n    return selectedActors.map(({ id }) => id);\n  }\n\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"app\">\n        <h1>Actors-Crossover</h1>\n\n        <div className=\"container\">\n          <div className=\"search\">\n            <h3>Select one or more actors</h3>\n\n            <ActorSearch\n              onActorSelect={onActorSelect}\n            />\n\n            <ul>\n              {selectedActors.map(actorSearchResult => (\n                <li key={actorSearchResult.id}>\n                  {actorSearchResult.name} (ID: {actorSearchResult.id})\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <div className=\"results\">\n            <button\n              disabled={selectedActors.length <= 1}\n              onClick={() => getCrossoverMovies({ variables: { actorIds: selectedActorIds() } })}\n            >\n              Find Movies\n            </button>\n\n            {loading && (<p>loading...</p>)}\n\n            {error && (<p>error: {error}</p>)}\n\n            {data?.crossoverMovies && (\n              <CrossoverMovies\n                movies={data.crossoverMovies}\n              />\n            )}\n          </div>\n        </div>\n\n        <div className=\"tmdb-api-link\">\n          <h4>Powered by The Movie Database API</h4>\n          <a href=\"https://www.themoviedb.org\" target=\"_blank\" rel=\"noreferrer\">\n            <img alt=\"Powered by The Movie DB\" src=\"https://www.themoviedb.org/assets/2/v4/logos/v2/blue_square_1-5bdc75aaebeb75dc7ae79426ddd9be3b2be1e342510f8202baf6bffa71d7f5c4.svg\" />\n         </a>\n        </div>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}